services:

  #rabbitmq_service:
  #  image: rabbitmq:4.0-management
  #  hostname: rabbitmq
  #  ports:
  #    - "5672:5672"
  #    - "15672:15672"
  #  healthcheck:
  #    test: rabbitmq-diagnostics check_port_connectivity
  #    interval: 10s
  #    timeout: 50s
  #    retries: 10
  #    start_period: 50s
  #  networks:
  #    - eazybytes_network


  kafka_service:
    image: docker.io/bitnami/kafka:3.7
    container_name: kafka-container
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka_service:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - eazybytes_network


  keycloak_service:
    image: quay.io/keycloak/keycloak:26.1.0
    container_name: keycloak-container
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    networks:
      - eazybytes_network


  redis_service:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 50s
      timeout: 50s
      interval: 10s
      retries: 10
    networks:
      - eazybytes_network


  config_server_service:
    image: lokeshjavatech/config-server:v1
    container_name: config-server-container
    ports:
      - 8071:8071
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      start_period: 50s
      timeout: 50s
      interval: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - eazybytes_network


  eureka_server_service:
    image: lokeshjavatech/eureka-server:v1
    container_name: eureka-server-container
    ports:
      - 8070:8070
    depends_on:
      config_server_service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      start_period: 50s
      timeout: 50s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "eureka-server"
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server-container:8071/"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - eazybytes_network


  accounts_service:
    image: lokeshjavatech/accounts:v1
    container_name: accounts-container
    # Commented the exposed port, so that this micro-service is not directly accessible to outside world and can only be accessed from within eazybytes_network docker network
    #ports:
    #  - 8080:8080
    depends_on:
      config_server_service:
        condition: service_healthy
      eureka_server_service:
        condition: service_healthy
      #rabbitmq_service:
      #  condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      start_period: 50s
      timeout: 50s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server-container:8071/"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server-container:8070/eureka/"
      #SPRING_RABBITMQ_HOST: "rabbitmq_service"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka_service:9092"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - eazybytes_network


  loans_service:
    image: lokeshjavatech/loans:v1
    container_name: loans-container
    # Commented the exposed port, so that this micro-service is not directly accessible to outside world and can only be accessed from within eazybytes_network docker network
    #ports:
    #  - 8090:8090
    depends_on:
      config_server_service:
        condition: service_healthy
      eureka_server_service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      start_period: 50s
      timeout: 50s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server-container:8071/"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server-container:8070/eureka/"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - eazybytes_network


  cards_service:
    image: lokeshjavatech/cards:v1
    container_name: cards-container
    # Commented the exposed port, so that this micro-service is not directly accessible to outside world and can only be accessed from within eazybytes_network docker network
    #ports:
    #  - 9000:9000
    depends_on:
      config_server_service:
        condition: service_healthy
      eureka_server_service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      start_period: 50s
      timeout: 50s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server-container:8071/"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server-container:8070/eureka/"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - eazybytes_network


  gateway_server_service:
    image: lokeshjavatech/gateway-server:v1
    container_name: gateway-server-container
    ports:
      - 8072:8072
    depends_on:
      accounts_service:
        condition: service_healthy
      loans_service:
        condition: service_healthy
      cards_service:
        condition: service_healthy
      redis_service:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gateway-server"
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server-container:8071/"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server-container:8070/eureka/"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis_service
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak-container:8080/realms/eazybank_dev_realm/protocol/openid-connect/certs"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - eazybytes_network


  messaging_service:
    image: lokeshjavatech/messaging:v1
    container_name: messaging-container
    #depends_on:
    #  rabbitmq_service:
    #    condition: service_healthy
    environment:
      #SPRING_RABBITMQ_HOST: "rabbitmq_service"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka_service:9092"
    networks:
      - eazybytes_network


volumes:
  kafka_data:
    driver: local


networks:
  eazybytes_network:
    driver: bridge
